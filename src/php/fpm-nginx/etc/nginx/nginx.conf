user webuser webgroup;
worker_processes auto;
worker_rlimit_nofile 100000;
pcre_jit on;
daemon off;

events {
    worker_connections 65535;
    use epoll;
    multi_accept on;
}

http {
    # define common MIME types
    include mime.types;

    # define the default MIME type
    default_type application/octet-stream;

    # disable emitting nginx version
    server_tokens off;

    # disable the directory listing output
    autoindex off;

    # disable automatic generation of the "ETag"
    etag off;

    # disable warnings about uninitialized variables are logged
    uninitialized_variable_warn off;

    # ======================================================================== #

    # the bucket size for the maps hash table
    map_hash_bucket_size  256;
    map_hash_max_size     4096;

    # the bucket size for the server names hash tables
    server_names_hash_bucket_size 256;
    server_names_hash_max_size    4096;

    # the bucket size for variables hash tables
    variables_hash_max_size     4096;
    variables_hash_bucket_size  4096;

    # ======================================================================== #

    # cache informations about FDs, frequently accessed files
    # can boost performance, but you need to test those values
    open_file_cache           max=200000 inactive=30s;
    open_file_cache_valid     30s;
    open_file_cache_min_uses  1;
    open_file_cache_errors    off;
    open_log_file_cache       max=10 inactive=30s min_uses=1 valid=5m;

    # ======================================================================== #

    # to boost I/O on HDD we can disable access logs
    access_log      off;
    log_not_found   off;
    log_subrequest  off;
    rewrite_log     on;

    # copies data between one FD and other from within the kernel
    # faster than read() + write()
    sendfile off;
    sendfile_max_chunk 1m;

    # send headers in one piece, it is better than sending them one by one
    tcp_nopush on;

    # don't buffer data sent, good for small data bursts in real time
    tcp_nodelay on;

    # large files can be read and sent using multi-threading
    # without blocking a worker process
    aio      threads;
    directio 1m;

    # how to compare modification time
    ssi on;
    if_modified_since off;

    # set default size of the slice
    slice 1m;

    # ======================================================================== #

    # allow the server to close connection on non responding client,
    # this will free up memory
    reset_timedout_connection on;

    # timeout for reading client request header -- default: 60
    client_header_timeout 10s;

    # request timed out -- default: 60
    client_body_timeout 75s;

    # if the request body size is more than the buffer size, then the entire (or partial)
    # request body is written into a temporary file
    client_body_buffer_size 128k;

    # if client stop responding, free up memory -- default: 60
    send_timeout 30s;

    # server will close connection after this time -- default: 75
    keepalive_timeout 30s;

    # number of requests client can make over keep-alive
    keepalive_requests 100000;

    # maximum number and size of buffers
    # for large headers to read from client request -- default: 4 8k;
    large_client_header_buffers 4 16k;

    # Set RealIP header
    real_ip_header CF-Connecting-IP;
    real_ip_recursive on;
    set_real_ip_from 10.0.0.0/8
    set_real_ip_from 172.16.0.0/12
    set_real_ip_from 192.168.0.0/16

    set_real_ip_from 103.21.244.0/22
    set_real_ip_from 103.22.200.0/22
    set_real_ip_from 103.31.4.0/22
    set_real_ip_from 104.16.0.0/13
    set_real_ip_from 104.24.0.0/14
    set_real_ip_from 108.162.192.0/18
    set_real_ip_from 131.0.72.0/22
    set_real_ip_from 141.101.64.0/18
    set_real_ip_from 162.158.0.0/15
    set_real_ip_from 172.64.0.0/13
    set_real_ip_from 173.245.48.0/20
    set_real_ip_from 188.114.96.0/20
    set_real_ip_from 190.93.240.0/20
    set_real_ip_from 197.234.240.0/22
    set_real_ip_from 198.41.128.0/17
    set_real_ip_from 2400:cb00::/32
    set_real_ip_from 2405:8100::/32
    set_real_ip_from 2405:b500::/32
    set_real_ip_from 2606:4700::/32
    set_real_ip_from 2803:f800::/32
    set_real_ip_from 2a06:98c0::/29
    set_real_ip_from 2c0f:f248::/32
    
    # resolver_timeout  5s;
    resolver    1.1.1.1 1.0.0.1
                8.8.8.8 8.8.4.4
                208.67.222.222 208.67.220.220
                ipv6=off valid=60s;

    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*.conf;
}